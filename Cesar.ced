;=====================================================
; Caso de teste #1
;=====================================================
org 32768
ne:	dw 11 ; numero de engenheiros. 32768

;pe: dw engenheiros ; 32770
endListaEng: dw engenheiros

nc: dw 10 ; nË™mero de cidades ; 32772
;pl: dw lucros ; 32774
endListaLucro: dw lucros

engenheiros: 
	dw eng0  ; 32776
	dw eng1  ; 32778
	dw eng2  ; 32780
	dw eng3  ; 32782
	dw eng4    ; 32784
	dw eng5    ; 32786
	dw eng6    ; 32790
	dw eng7    ; 32792
	dw eng8    ; 32794
	dw eng9    ; 32796
	dw eng10   ; 32798

lucros: daw 500,-100,350,-50,1200,950,800,-200,100,1000 ; 32794
32796, 32798, 32800, 32802, 32804, 32806, 32808 

eng7:  daw 3,1,3,7 ; 32810
eng6:  daw 1,4 ; 32812
eng5:  daw 0 ; 32814
eng8:  daw 7,0,2,4,5,6,8,9 ; 32816
eng0:  daw 4,0,1,2,3 ; 32818
eng1:  daw 5,4,5,6,7,8 ; 32820
eng2:  daw 3,9,5,1 ; 32822
eng3:  daw 5,0,2,4,6,8 ; 32824
eng4:  daw 10,0,1,2,3,4,5,6,7,8,9 ; 32826
eng9:  daw 2,1,8 ; 32828
eng10: daw 3,1,2,7 ; 32830

; resultados
;   eng0: 700
;   eng1: 2850
;   eng2: 1850
;   eng3: 2950
;   eng4: 4550
;   eng5: 0
;   eng6: 1200
;   eng7: -350
;   eng8: 4900
;   eng9: 0
;   eng10: 50
;

org 65500
	dab 'Teste #1 carregado'
;=====================================================


;> Inicializacao do apontador da pilha
;> para que a pilha fique acima da area
;> de memoria mapeada para entrada e saida
;> ESTAS DUAS INSTRUCOES DEVEM SER MANTIDAS AQUI !
;=====================================================

ORG 20000 ; area de variaveis
	msgAluno: DAB 'Henrique Valcanaia - 240501', 0 	   ; 0 para encerrar a string
	msgMenu: DAB 'Selecione uma acao: [r][e][g][f]', 0 ; 0 para encerrar a string
	msgErroAcaoInvalida: DAB 'Acao invalida', 0 	   ; 0 para encerrar a string
	msgResumo1: DAB 'Engenheiros: ',0
	msgResumo2: DAB 'Cidades: ',0
	msgEng: DAB 'Engenheiro ',0
	msgSelEng: DAB 'Engenheiro: ',0
	msgMaiorLucro: DAB 'Maior lucro: R$ ',0
	msgMaiorLucro1: DAB ',00 do eng: ',0
	msgSemLucroPrejuizo: DAB ', sem lucro ou prejuizo', 0
	msgLucro: DAB ', lucro R$ ', 0
	msgPrejuizo: DAB ', prejuizo R$ ', 0
	msgCentavos: DAB ',00',0
	

ORG 23000
	iEng: DW 0

ORG 25000
	maiorLucro: DW 0 ; valor do maior lucro
	iEngMaiorLucro: DW 0 ; indice do engenheiro que tem o maior lucro

ORG 30000 ; valor definido para facilitar debug
	listaLucrosEng: DAW 99 ; esta lista armazenara os dados pre calculados dos engenheiros mantendo a mesma ordenacao da lista principal

;ORG 32768
;	ne: DW 99;
;	endListaEng: DW 0;
;	nc: DW 999;
;	endListaLucro: DW 0;

ORG 0
	MOV #32767, R6 ; aponta SP para 32767 conforme especificacao do trabalho

	JSR R7, _S_LIMPA_VISOR_ULTRA ; remove msg da lib
	JSR R7, _S_ID_ALUNO ; imprime identificacao do aluno

	JSR R7, _S_CALCULA ; calcula todos os totais
	
	JSR R7, _S_AGUARDA_ENTER_ESC ; aguarda tecla pra exibir resumo

	JSR R7, _S_RESUMO ; aguarda tecla
	JSR R7, _S_MENU
	
	JSR R7, _S_ENCERRAR_HENRIQUE

_S_RESUMO:
	JSR R7, _S_LIMPA_VISOR_ULTRA
	
	MOV #msgResumo1, R0
	MOV #0, R1
	JSR R7, _S_ESCREVER_NO_VISOR ; Engenheiros:

	MOV #14, R5 ; indice do dispostivo de i/o
	MOV ne, R1 ; valor a ser exibido no visor
	JSR R7, _S_EXIBE_ENG

	MOV #msgResumo2, R0
	MOV #19, R1
	JSR R7, _S_ESCREVER_NO_VISOR ; Cidades:

	MOV #28, R5 ; indice do dispostivo de i/o
	MOV nc, R1 ; valor a ser exibido no visor
	JSR R7, _S_EXIBE_CIDADE

	resumoSalvaRegistradores:
		MOV R0,-(R6)	; salva R0 na pilha
	
	resumoInicio:
		MOV #65498,R0	; ponteiro para controle do teclado
	resumoLimpa:
		CLR (R0)		; libera buffer do teclado
	resumoTesta:
		TST (R0)		; testa se foi digitado algo
		BEQ resumoTesta	; se nao foi, continua testando

		CMP 65499, #13	; testa se recebeu caractere R
			BEQ resumoEnter 	; se sim, vai pro resumo

		BR resumoLimpa ; nenhuma tecla valida volta a esperar por caractere. Esta funcao nao volta ao inicio pois os registradores R1 e R3 nao sao alterados durante sua execucao

	resumoEnter:
		JSR R7, _S_MENU

	resumoRestauraRegistradores:
		MOV (R6)+, R0	; restaura R0 da pilha

	RTS R7


;>
;> MOV #0, R5 ; indice do dispostivo de i/o
;> MOV valor, R1 ; valor a ser exibido no visor
;> JSR R7, _S_EXIBE_REL_ENG
;>
_S_EXIBE_REL_ENG:
	MOV R0,-(R6)
	MOV R1,-(R6)
	MOV R2,-(R6)
	MOV R5,-(R6)

	ADD #65500, R5 ; converte indice pra posicao de i/o
	ADD #4, R5 ; como o lucro pode ir ate 99999 eh somado n-1, onde n eh o numero de digitos a ser escrito considerando que os dados sao preenchidos de tras pra frente
	; Ex.: lucro: 9999
	; R5 = 13 ; posicao inicial que eh o digito 1, entao R5 sera posicionado na posicao do digito 3

	CLR R0 			; 16 bits mais significativos do dividendo
	MOV #10,R2 		; divisor (16 bits)
	JSR R7,_S_DIVIDIR ; dividir por 10

	ADD #48, R1 ; converter resto para ASCII
	MOV R1, (R5) ; mover unidade para LED 0 no visor

	;dividir quociente anterior por 10
	MOV R0, R1 ; zera R1
	CLR R0
	JSR R7,_S_DIVIDIR

	ADD #48, R1
	DEC R5 ; volta uma posicao no visor
	MOV R1, (R5)

	;dividir quociente anterior por 10
	MOV R0, R1
	CLR R0
	JSR R7,_S_DIVIDIR

	ADD #48, R1
	DEC R5 ; volta uma posicao no visor
	MOV R1, (R5)

	;dividir quociente anterior por 10
	MOV R0, R1
	CLR R0
	JSR R7,_S_DIVIDIR

	ADD #48, R1
	DEC R5 ; volta uma posicao no visor
	MOV R1, (R5)

	;dividir quociente anterior por 10
	MOV R0, R1
	CLR R0
	JSR R7,_S_DIVIDIR

	ADD #48, R1
	DEC R5 ; volta uma posicao no visor
	MOV R1, (R5)

	fim:
		MOV (R6)+, R5 ; restaura R2
		MOV (R6)+, R2 ; restaura R2
		MOV (R6)+, R1 ; restaura R1
		MOV (R6)+, R0 ; restaura R0

	RTS R7

;>
;> MOV #0, R5 ; indice do dispostivo de i/o
;> MOV valor,R1 ; valor a ser exibido no visor
;> JSR R7, _S_EXIBE_ENG
;>
_S_EXIBE_ENG:
	MOV R0,-(R6)
	MOV R1,-(R6)
	MOV R2,-(R6)
	MOV R5,-(R6)

	ADD #65500, R5 ; converte indice pra posicao de i/o
	ADD #1, R5 ; como podem existir ate 99 engenheiros eh somado n-1, onde n eh o numero de digitos a ser escrito considerando que os dados sao preenchidos de tras pra frente
	; Ex.: Engenheiro: 123
	; R5 = 13 ; posicao inicial que eh o digito 1, entao R5 sera posicionado na posicao do digito 3

	CLR R0 			; 16 bits mais significativos do dividendo
	MOV #10,R2 		; divisor (16 bits)
	JSR R7,_S_DIVIDIR ; dividir por 10

	ADD #48, R1 ; converter resto para ASCII
	MOV R1, (R5) ; mover unidade para LED 0 no visor

	;dividir quociente anterior por 10
	MOV R0, R1
	CLR R0
	JSR R7,_S_DIVIDIR

	ADD #48, R1
	DEC R5 ; volta uma posicao no visor
	MOV R1, (R5)

	MOV (R6)+, R5 ; restaura R2
	MOV (R6)+, R2 ; restaura R2
	MOV (R6)+, R1 ; restaura R1
	MOV (R6)+, R0 ; restaura R0

	RTS R7

;>
;> MOV #0, R5 ; indice do dispostivo de i/o
;> MOV valor, R1 ; valor a ser exibido no visor
;> JSR R7, _S_EXIBE_CIDADE
;>
_S_EXIBE_CIDADE:
	MOV R0,-(R6)
	MOV R1,-(R6)
	MOV R2,-(R6)
	MOV R5,-(R6)

	ADD #65500, R5 ; converte indice pra posicao de i/o
	ADD #2, R5 ; como podem existir ate 999 cidadess eh somado n-1, onde n eh o numero de digitos a ser escrito considerando que os dados sao preenchidos de tras pra frente
	; Ex.: Engenheiro: 123
	; R5 = 13 ; posicao inicial que eh o digito 1, entao R5 sera posicionado na posicao do digito 3

	CLR R0 			; 16 bits mais significativos do dividendo
	MOV #10,R2 		; divisor (16 bits)
	JSR R7,_S_DIVIDIR ; dividir por 10

	ADD #48, R1 ; converter resto para ASCII
	MOV R1, (R5) ; mover unidade para LED 0 no visor

	;dividir quociente anterior por 10
	MOV R0, R1
	CLR R0
	JSR R7,_S_DIVIDIR

	ADD #48, R1
	DEC R5 ; volta uma posicao no visor
	MOV R1, (R5)

	;dividir quociente anterior por 10
	MOV R0, R1
	CLR R0
	JSR R7,_S_DIVIDIR

	ADD #48, R1
	DEC R5 ; volta uma posicao no visor
	MOV R1, (R5)

	fimExibeCidade:
		MOV (R6)+, R5 ; restaura R2
		MOV (R6)+, R2 ; restaura R2
		MOV (R6)+, R1 ; restaura R1
		MOV (R6)+, R0 ; restaura R0

	RTS R7


_S_MENU:
	JSR R7, _S_LIMPA_VISOR_ULTRA
	MOV #msgMenu,R0
	MOV #0, R1
	JSR R7, _S_ESCREVER_NO_VISOR ; Escreve mensagem de apresentacao
	
	JSR R7, _S_AGUARDA_OPCAO_MENU

	RTS R7

_S_AGUARDA_OPCAO_MENU:
	opcaoMenuSalvaRegistradores:
		MOV R0,-(R6)	; salva R0 na pilha
	
	opcaoMenuSalvaInicio:
		MOV #65498,R0	; ponteiro para controle do teclado
	opcaoMenuSalvaLimpa:
		CLR (R0)		; libera estado do teclado
		CLR 65499 ; limpa buffer
	opcaoMenuSalvaTesta:
		TST (R0)		; testa se foi digitado algo
		BEQ opcaoMenuSalvaTesta	; se nao foi, continua testando

		CMP 65499, #'r'	; testa se recebeu caractere r
			BEQ resumo 	; se sim, vai pro resumo

		CMP 65499, #'R'	; testa se recebeu caractere R
			BEQ resumo 	; se sim, vai pro resumo

		CMP 65499, #'g'	; testa se recebeu caractere g
			BEQ geral 	; se sim, vai pro relatorio geral

		CMP 65499, #'G'	; testa se recebeu caractere G
			BEQ geral 	; se sim, vai pro relatorio geral

		CMP 65499, #'f'	; testa se recebeu caractere f
			BEQ fimAguarda 	; se sim, vai terminar execucao

		CMP 65499, #'F'	; testa se recebeu caractere F
			BEQ fimAguarda 	; se sim, vai terminar execucao

		CMP 65499, #'e'	; testa se recebeu caractere e
			BEQ eng 	; se sim, vai pra selecao de engenheiros

		CMP 65499, #'E'	; testa se recebeu caractere E
			BEQ eng 	; se sim, vai pra selecao de engenheiros

		BR opcaoMenuSalvaTesta ; nenhuma tecla valida volta a esperar por caractere. Esta funcao nao volta ao inicio pois os registradores R1 e R3 nao sao alterados durante sua execucao

	geral:
		JSR R7, _S_MENU_REL_GERAL
		BR opcaoMenuSalvaTesta

	resumo:
		JSR R7, _S_RESUMO ; 
		BR opcaoMenuSalvaTesta

	fimAguarda:
		JSR R7, _S_ENCERRAR_HENRIQUE

	eng:
		JSR R7, _S_SELECAO_ENG
		BR opcaoMenuSalvaTesta
	
	opcaoMenuRestauraRegistradores:
		MOV (R6)+,R0	; restaura R0

	opcaoMenuRetorna:
		RTS R7

_S_MENU_REL_GERAL:
	; HLT ; debug
	JSR R7, _S_LIMPA_VISOR_ULTRA

	MOV #msgMaiorLucro, R0 
	MOV #0, R1
	JSR R7, _S_ESCREVER_NO_VISOR

	MOV #20, R5 ; move indice desejado pra R5
	MOV maiorLucro, R3 ; move valor que deseja imprimir
	JSR R7, _S_PRINT_NUMEROS

	MOV #msgMaiorLucro1, R0 
	MOV #21, R1
	JSR R7, _S_ESCREVER_NO_VISOR

	MOV #34, R5 ; move indice desejado pra R5
	MOV iEngMaiorLucro, R3 ; move valor que deseja imprimir
	JSR R7, _S_PRINT_NUMEROS

	relGeralSalvaInicio:
		MOV #65498,R0	; ponteiro para controle do teclado
	relGeralSalvaLimpa:
		CLR (R0)		; libera estado do teclado
		CLR 65499 ; limpa buffer
	relGeralSalvaTesta:
		TST (R0)		; testa se foi digitado algo
		BEQ relGeralSalvaTesta	; se nao foi, continua testando

		CMP 65499, #13
			BEQ voltaMenu

		BR relGeralSalvaTesta

		voltaMenu:
			JMP _S_MENU ; Se for enter volta pro menu


_S_SELECAO_ENG:
	JSR R7, _S_LIMPA_VISOR_ULTRA

	selecaoEngSalvaRegistradores:
		MOV R0, -(R6)
		MOV R1, -(R6) ; R1 sera o contador de digitos
		MOV R4, -(R6) ; R4 sera o i
		MOV R5, -(R6) ; R5 sera o ponteiro do teclado

		MOV #msgSelEng, R0 
		MOV #0, R1
		JSR R7, _S_ESCREVER_NO_VISOR

	selecaoEngInicio:
		MOV #65498, R0	; ponteiro para controle do teclado
		MOV #65512, R5	; ponteiro do teclado
		MOV #'_', (R5)	; preenche com underscore
	selecaoEngLimpa:
		MOV #48, R4 ; inicializa R4 com '0'
		CLR 65499		; limpa buffer do teclado
		CLR (R0)		; limpa status do teclado
	selecaoEngTesta:
		TST (R0)		; testa se foi digitado algo
		BEQ selecaoEngTesta	; se nao foi, continua testando

		CMP 65499, #13	; testa se foi pressionado enter
	    	BEQ selecaoEngEnter ; se sim, valida o indice

	    CMP 65499, #8
	    	BEQ selecaoEngBackspace

	    validaDigito:
	    	CMP 65499, R4 ; buffer - R4
	    		BEQ apertouDigito

	    	INC R4

	    	CMP #58, R4
	    		BEQ selecaoEngTesta ; se chegou ao fim e nao encontrou volta a aguardar tecla

	    	BR validaDigito ; se nao chegou ao fim significa que ainda nao verificou todos os digitos

		selecaoEngBackspace:
			CMP #65512, R5
				BEQ selecaoEngTesta

			MOV #' ', (R5)
			DEC R5
			MOV #'_', (R5)
			CLR (R0)		; limpa status do teclado
			BR selecaoEngTesta; volta a esperar por caractere

	    apertouDigito:
			CMP #65516, R5
				BEQ selecaoEngLimpa ; permitir somente 4 digitos

			MOV 65499, (R5) ; escreve caracter do buffer no ponteiro do teclado
			INC R5 ; move ponteiro do teclado pra frente
			MOV #'_', (R5)	; imprime underscore
			BR selecaoEngLimpa; volta a esperar por caractere

	selecaoEngEnter:
		DEC R5 ; decrementa devido ao cursor '_', fazendo com que o ponteiro fique no ultimo digito valido

		MOV (R5), R4
		SUB #48, R4 ; converte pra decimal
		MOV R4, iEng ; salva no indice do engenheiro
		CMP #65512, R5
			BEQ selecaoEngBusca ; se chegou no inicio do i/o vai pra busca

		DEC R5 ; recua 1 posicao no ponteiro
		MOV (R5), R4 ; copia o caracter pro R4
		SUB #48, R4 ; converte
		MOV R4, R0 ; multiplicando
		MOV #10, R1 ; multiplicador
		JSR R7, _S_MULTIPLICAR ; No R0 ficara a msword e R1 ficara a lsword
		ADD R1, iEng ; Soma com as unidades
		MOV R1, iEng
		CMP #65512, R5
			BEQ selecaoEngBusca

		DEC R5 ; recua 1 posicao no ponteiro
		MOV (R5), R4 ; copia o caracter pro R4
		SUB #48, R4 ; converte
		MOV R4, R0 ; multiplicando
		MOV #100, R1 ; multiplicador
		JSR R7, _S_MULTIPLICAR ; No R0 ficara a msword e R1 ficara a lsword
		ADD R1, iEng ; Soma com as unidades
		MOV R1, iEng
		CMP #65512, R5
			BEQ selecaoEngBusca

		DEC R5 ; recua 1 posicao no ponteiro
		MOV (R5), R4 ; copia o caracter pro R4
		SUB #48, R4 ; converte
		MOV R4, R0 ; multiplicando
		MOV #1000, R1 ; multiplicador
		JSR R7, _S_MULTIPLICAR ; No R0 ficara a msword e R1 ficara a lsword
		ADD R1, iEng ; Soma com as unidades
		MOV R1, iEng
		CMP #65512, R5
			BEQ selecaoEngBusca

		selecaoEngBusca:
			; validar indice do engenheiro
			MOV R0,-(R6) ; salva R0 na pilha

			MOV iEng, R0 ; carrega indice do engenheiro digitado em R0
			ADD R0, R0 ; converte pra palavra
			ADD #listaLucrosEng, R0 ; soma o endereco que inicia a estrutura com os lucros calculados
			;HLT ; DEBUG
			JSR R7, _S_RELATORIO_ENG
			
			MOV (R6)+, R0 ; restaura R0

			; HLT
	
	selecaoEngRestauraRegistradores:
		MOV (R6)+, R5
		MOV (R6)+, R4
		MOV (R6)+, R1
		MOV (R6)+, R0

	selecaoEngRetorna:
		RTS R7

;> Em R0 tera o endereco do lucro do engenheiro
_S_RELATORIO_ENG:
	JSR R7, _S_LIMPA_VISOR_ULTRA
	MOV R0, -(R6) ; salva endereco do lucro do engenheiro na pilha
	MOV R3, -(R6) ; salva R3 na pilha pois eh utilizada na funcao de escrever no visor com ADD
	CLR R3

	MOV #msgEng, R0 ;
	MOV #0, R1 ;
	JSR R7, _S_ESCREVER_NO_VISOR

	MOV iEng, R0
	
	MOV #12, R5 ; move indice desejado pra R5
	MOV iEng, R3 ; move valor que deseja imprimir
	JSR R7, _S_PRINT_NUMEROS

	MOV #msgEng, R0 ;
	MOV #0, R1 ;
	JSR R7, _S_ESCREVER_NO_VISOR

	JSR R7, _S_PRINT_LUCRO_PREJUIZO

	; AGUARDA ENTER
	relEngSalvaRegistradores:
		MOV R0,-(R6)	; salva R0 na pilha
	
	relEngSalvaInicio:
		MOV #65498,R0	; ponteiro para controle do teclado
	relEngSalvaLimpa:
		CLR (R0)		; libera estado do teclado
		CLR 65499 ; limpa buffer
	relEngSalvaTesta:
		TST (R0)		; testa se foi digitado algo
		BEQ relEngSalvaTesta	; se nao foi, continua testando

		CMP 65499, #13	; testa se recebeu caractere R
			BEQ relEngRestauraRetorna 	; se sim, vai pro resumo

		BR relEngSalvaTesta ; ignora se foi outra tecla alem do enter

	relEngRestauraRetorna:
		MOV (R6)+, R0 ; restaura R0 que estava sendo utilizado como estado do teclado
		MOV (R6)+, R3 ; restaura R3 usado na funcao de escrever no visor
		MOV (R6)+, R0 ; restaura endereco do lucro
		JMP _S_SELECAO_ENG

_S_PRINT_LUCRO_PREJUIZO:
	MOV R0,-(R6)
	MOV R1,-(R6)

	MOV iEng, R0 ; move indice do engenheiro selecionado pra R0
	ADD R0, R0 ; converte palavra
	ADD #listaLucrosEng, R0 ; soma com a posicao inicial da estrutura de armazenamento

	MOV (R0), R3 ; copia endereco pra R3 para printar no final

	CMP #0, (R0)
		BEQ lucroZero

	MOV (R0), R1 ; se der positivo R1 eh positivo, se der negativo R1 eh negativo
		BMI prejuizo; Se for positivo salva direto
	
	BR lucro

	lucroZero:
		MOV #13, R1 ;
		MOV #msgSemLucroPrejuizo, R0
		BR print
		
	lucro:
		MOV #msgLucro, R0
		BR printTexto
	
	prejuizo:
		MOV #msgPrejuizo, R0
		NEG R3 ; converte pra positivo
		BR printTexto

	printTexto:
		MOV #13, R1 ;
		JSR R7, _S_ESCREVER_NO_VISOR

	printValor:
		MOV #31, R5 ; move indice desejado pra R5
		;MOV iEng, R3 ; move valor que deseja imprimir. R3 ja esta com o endereco do valor pois foi copiado no inicio da funcao
		JSR R7, _S_PRINT_NUMEROS
		
		MOV #msgCentavos, R0
		MOV #32, R1
	print:
		JSR R7, _S_ESCREVER_NO_VISOR

	MOV (R6)+, R0


_S_ZERA_REGISTRADORES:
	CLR R0
	CLR R1
	CLR R2
	CLR R3
	CLR R4
	CLR R5
	RTS R7
;>
;> Esta funcao deve ser chamada no inicio do programa para calcular os totais de cada engenheiro e gravar em listaLucrosEng
;>
_S_CALCULA:
	JSR R7, _S_ZERA_REGISTRADORES
	; HLT ; DEBUG
	MOV ne, R5 ; controle do loop eh o numero de engenheiros
	MOV endListaEng, R0 ; carrega o endereco da lista de engenheiros em R0
	continua: 
		CMP #0, R5
			BNE loopEng ; se tem engenheiros vai pro loop
		
		RTS R7 ; se nao tem engenheiros ja retorna
	
		loopEng:
			DEC R5 ; decrementa controle do loop

			MOV (R0)+, R1 ; carrega o endereco da lista de visitas do engenheiro n em R1 e aponta R0 pro endereco da lista de visistas do proximo engenheiro
			MOV (R1)+, R2 ; em R1 esta o endereco da lista de visitas. O endereco inicial tem o numero de visitas, este e' movido pra R2
			CMP #0, R2 ; verifica se tem visitas
				BEQ salvaTotal ; Se possui 0 visitas ja retorna
			MOV R2, R4 ; copia o numero de visitas do engenheiro pra R4 para controle do loop das visitas. R4 controlara a quantidade de visitas do loop
			
			loopVisitas:
				MOV (R1)+, R2 ; Pega o indice da visita n, move pra R2 e aponta pra proxima visita
				
				ADD R2, R2 ; tratamento de palavra de 16 bits. converte indice pra palavras
				ADD endListaLucro, R2 ; aponta R2 para a posicao a ser somada

				ADD (R2), R3 ; soma endereco da visita em R2 com R3

				;HLT ; DEBUG

				DEC R4 ; decrementa contador do numero de visitas
				CMP #0, R4
					BEQ salvaTotal ; se chegou a zero eh pq somou todo mundo ja, pode salvar
				BR loopVisitas

				salvaTotal:
					; implementa pra ja verificar maior e menor e salvar
					MOV R5, -(R6) ; salva R5 na pilha
					MOV R4, -(R6) ; salva R4 na pilha
					
					MOV ne, R4 ; copia ne pro R4
					SUB R5, R4 ; R4 = R4(ne) - R5 = indice do engenheiro processado
					
					MOV #1, R5
					SUB R5, R4 ; R4 = R4(1) - R5 feito para ajustar o indice do engenheiro pra comecar do 0
					; HLT ; DEBUG
					JSR R7, _S_VERIFICA_MAIOR_LUCRO ; em R3 estara o valor atualmente calculado e em R4 o indice do engenheiro

					ADD R4, R4 ; transforma em palavras
					ADD #listaLucrosEng, R4 ; soma com o endereco inicial da lista de lucros

					MOV R3, (R4) ; salva o valor na posicao calculada
					CLR R3 ; zera registrador para calcular o proximo eng

					MOV (R6)+, R4 ; restaura R4
					MOV (R6)+, R5 ; restaura R5
					BR continua

;> R3 = valor a ser verificado
;> R4 = indice do engenheiro
;> Se R3 > maiorLucro
;>     (maiorLucro) = R3
;>
;> Nenhum registrador eh alterado
;>
_S_VERIFICA_MAIOR_LUCRO:
	CMP maiorLucro, R3 ; se der positivo R3 eh positivo, se der negativo R3 eh negativo
		BLE ehMaior ; Se for positivo salva direto
	RTS R7

	ehMaior:
		MOV R3, maiorLucro
		MOV R4, iEngMaiorLucro
		RTS R7


_S_VERIFICA_NEGATIVO:
	;HLT ; DEBUG
	CMP #32767, R3 ; se der positivo R3 eh positivo, se der negativo R3 eh negativo
		;BLE positivo ; Se for positivo salva direto

	; negativo 
	; se for negativo converte antes de salvar
	NOT R3 ; R3 contem o valor
	ADD R5, R3 ; R5 contem 1	

_S_AGUARDA_ENTER_ESC:
	enterEscSalvaRegistradores:
		MOV R0,-(R6)	; salva R0 na pilha

	enterEscInicio:
		MOV #65498,R0	; ponteiro para controle do teclado
	enterEscLimpa:
		CLR (R0)		; libera buffer do teclado
	enterEscTesta:
		TST (R0)		; testa se foi digitado algo
		BEQ enterEscTesta	; se nao foi, continua testando

		CMP 65499,#13	; testa se recebeu caractere ESC (1BH)
	    	BEQ enterEscRestauraRegistradores ; se sim, restaura registradores e retorna pro main

		CMP 65499,#27 ; testa se recebeu caractere ESC (1BH)
	    	BEQ enterEscEsc ; se sim, vai terminar execucao

		BR enterEscLimpa; volta a esperar por caractere. esta funcao nao volta ao inicio pois os registradores R1 e R3 nao sao alterados durante sua execucao

	enterEscEsc:
		JSR R7, _S_ENCERRAR_HENRIQUE
	
	enterEscRestauraRegistradores:
		MOV (R6)+,R0	; restaura R0

	enterEscRetorna:
		RTS R7

_S_ID_ALUNO:
	MOV #msgAluno,R0
	MOV #0,R1
	JSR R7, _S_ESCREVER_NO_VISOR
	RTS R7

;> 
;> MOV #0, R5 ; move indice desejado pra R5
;> MOV #0, R3 ; move valor que deseja imprimir
;> JSR R7, _S_PRINT_NUMEROS
_S_PRINT_NUMEROS:
	; salva registradores utilizados
	MOV R0, -(R6)          
	MOV R1, -(R6)          
	MOV R2, -(R6) 
	MOV R4, -(R6) ; R4 armazenara o quociente

	ADD #65500, R5 ; CONVERTE INDICE PRA POSICAO

	CLR R0 ; 16 bits mais significativos do dividendo
	MOV R3, R1 ; 16 bits menos significativos do dividendo
	MOV #10, R2 ; divisor
	JSR R7, _S_DIVIDIR

	ADD #48, R1 ; converter resto para ASCII

	MOV R1, (R5) ; mover digito da unidade para primeira posicao

	;dividir quociente anterior por 10
	printNumQuocienteNaoZero:
		DEC R5 ; decrementa ponteiro do visor
		MOV R0, R4
		BEQ printNumRestauraRetorna ; Se na primeira divisÃ£o o quociente resultante foi 0 ja retorna. isso significa que tem somente 1 digito
		
		MOV R0, R1
		CLR R0
		JSR R7, _S_DIVIDIR

		ADD #48, R1 ; converter resto para ASCII

		MOV R1, (R5) ; move digito calculado(dezena, centena, milhar) pra posicao correspondente no visor

		MOV R0, R4  
		BEQ printNumRestauraRetorna
		
		JMP printNumQuocienteNaoZero

	printNumRestauraRetorna:
		MOV (R6)+,R4
		MOV (R6)+,R2          
		MOV (R6)+,R1          
		MOV (R6)+,R0          
		RTS R7

_S_ENCERRAR_HENRIQUE:
	JSR R7, _S_ZERA_REGISTRADORES
	JSR R7, _S_LIMPA_VISOR_ULTRA ; limpa qualquer info anterior
	MOV #__msgfim, R0
	MOV #0, R1
	JSR R7, _S_ESCREVER_NO_VISOR
	HLT

;=====================================================


MOV #10,R2		; divisor no R2
CLR R0			; R0 = msbits do dividendo

;primeira divisao por 10: resto = digito da unidade
JSR R7,_S_DIVIDIR	
ADD #48,R1		; R1 = resto (digito da unidade) - soma com '48' direto no LED
MOV R1,(R4)  	 	; Mostra no visor
DEC R4
MOV R0, R1		; R0 = quociente (digitos da centena e dezena
CMP #0,R1        
BEQ fim_conversao
CLR R0			; [R0][R1] e' o novo dividendo (quociente da divisao anterior)

;segunda divisao por 10: resto = digito da dezena e quociente = digito da centena
imprime_proximo:
	CMP #0,R1
	BEQ fim_conversao
	JSR R7,_S_DIVIDIR
	add #48,R1		; R1 = resto (digito da dezena) - soma com '48' direto no LED
	MOV R1,(R4)
	DEC R4
	MOV R0,R1
	CLR R0
	BR imprime_proximo
fim_conversao:
	RTS R7


;>---------------------------------------------------<
;> AS SUBROTINAS DEVEM INICIAR SOMENTE APOS A ULTIMA <
;> INSTRUCAO CODIFICADA NO PROGRAMA, QUE DEVE SER UM <
;> HLT OU DESVIO INCONDICIONAL (JMP, BR OU RTS), OU  <
;> APOS A AREA DE DEFINICAO DE DADOS DO PROGRAMA.    <
;>---------------------------------------------------<
;>
;> Subrotina iterativa para "limpar" o visor (279 acessos)
;>
;> Chamada da subrotina:
;>
;> JSR R7,_S_LIMPA_VISOR_ITERATIVA
;>
          
_S_LIMPA_VISOR_ITERATIVA:
          MOV R0,-(R6)          ; salva R0 na pilha
          MOV R1,-(R6)          ; salva R1 na pilha
          MOV #65500,R1         ; move end. do visor p/R1
          MOV #36,R0            ; move 36 para contador
__OUTRO_LED:
          CLR (R1)              ; limpa 1 LED do visor
          INC R1                ; aponta p/LED seguinte
          SOB R0,__OUTRO_LED    ; subtrai 1 do contador
                                ; se <> 0, repete o laco
          MOV (R6)+,R1          ; restaura R1
          MOV (R6)+,R0          ; restaura R0
          RTS R7                ; retorna ao ponto de chamada
;>
;>
;> Subrotina rapida para "limpar" o visor (183 acessos)
;>
;> Chamada da subrotina:
;>
;> JSR R7,_S_LIMPA_VISOR_RAPIDA
;>

_S_LIMPA_VISOR_RAPIDA:
          CLR 65500             ; limpa LED 00
          CLR 65501             ; limpa LED 01
          CLR 65502             ; limpa LED 02
          CLR 65503             ; limpa LED 03
          CLR 65504             ; limpa LED 04
          CLR 65505             ; limpa LED 05
          CLR 65506             ; limpa LED 06
          CLR 65507             ; limpa LED 07
          CLR 65508             ; limpa LED 08
          CLR 65509             ; limpa LED 09
          CLR 65510             ; limpa LED 10
          CLR 65511             ; limpa LED 11
          CLR 65512             ; limpa LED 12
          CLR 65513             ; limpa LED 13
          CLR 65514             ; limpa LED 14
          CLR 65515             ; limpa LED 15
          CLR 65516             ; limpa LED 16
          CLR 65517             ; limpa LED 17
          CLR 65518             ; limpa LED 18
          CLR 65519             ; limpa LED 19
          CLR 65520             ; limpa LED 20
          CLR 65521             ; limpa LED 21
          CLR 65522             ; limpa LED 22
          CLR 65523             ; limpa LED 23
          CLR 65524             ; limpa LED 24
          CLR 65525             ; limpa LED 25
          CLR 65526             ; limpa LED 26
          CLR 65527             ; limpa LED 27
          CLR 65528             ; limpa LED 28
          CLR 65529             ; limpa LED 29
          CLR 65530             ; limpa LED 30
          CLR 65531             ; limpa LED 31
          CLR 65532             ; limpa LED 32
          CLR 65533             ; limpa LED 33
          CLR 65534             ; limpa LED 34
          CLR 65535             ; limpa LED 35
          RTS R7                ; retorna ao ponto de chamada
;>
;>
;> Subrotina "ultra rapida" "limpar" o visor (135 acessos)
;>
;> Chamada da subrotina:
;>
;> JSR R7,_S_LIMPA_VISOR_ULTRA
;>

_S_LIMPA_VISOR_ULTRA:
          MOV R0,-(R6)          ; salva R0 na pilha
          MOV R1,-(R6)          ; salva R1 na pilha
          MOV #65500,R0         ; move end. do LED 0 do visor p/R1
          MOV #65501,R1         ; move end. do LED 1 do visor p/R1
          CLR (R0)+             ; limpa LED 00 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 01 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 02 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 03 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 04 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 05 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 06 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 07 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 08 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 09 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 10 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 11 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 12 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 13 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 14 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 15 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 16 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 17 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 18 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 19 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 20 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 21 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 22 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 23 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 24 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 25 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 26 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 27 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 28 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 29 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 30 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 31 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 32 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 33 do visor e soma 2 ao R1
          CLR (R0)+             ; limpa LED 34 do visor e soma 2 ao R0
          CLR (R1)+             ; limpa LED 35 do visor e soma 2 ao R1
          MOV (R6)+,R1          ; restaura R1
          MOV (R6)+,R0          ; restaura R0
          RTS R7                ; retorna ao ponto de chamada
;>
;>
;> Subrotina para "preencher" o visor com um caractere
;>
;> Chamada da subrotina:
;>
;> MOV #codASCII,R2             ; colocar no R2 o caractere a ser usado
;> JSR R7,_S_PREENCHE_VISOR
;>
          
_S_PREENCHE_VISOR:
          MOV R0,-(R6)          ; salva R0 na pilha
          MOV R1,-(R6)          ; salva R1 na pilha
          MOV #65500,R1         ; move end. do visor p/R1
          MOV #36,R0            ; move 36 para contador
__MAIS1_LED:
          MOV R2,(R1)           ; move caractere p/1 LED do visor
          INC R1                ; aponta p/LED seguinte
          SOB R0,__MAIS1_LED    ; subtrai 1 do contador
                                ; se <> 0, repete o laco
          MOV (R6)+,R1          ; restaura R1
          MOV (R6)+,R0          ; restaura R0
          RTS R7                ; retorna ao ponto de chamada
;>
;>
;> Subrotina para escrever mensagem no visor
;>
;> Chamada da subrotina:
;>
;> MOV #tammensagem,R0          ; tamanho da mensagem (em caracteres)
;> MOV #endmensagem,R1          ; endereco da mensagem a ser escrita no visor
;> MOV #endvisor,R2             ; endereco do LED onde deve iniciar a mensagem
;> JSR R7,_S_ESCREVER_NO_VISOR_V0
;>

_S_ESCREVER_NO_VISOR_V0:
          MOV R3,-(R6)          ; salva R3 para usar na subrotina (V12 - 25/09/2014)
__VOLTA_ESCR:
          MOV (R1),R3           ; coloca 2 caracteres em R3
          ASR R3                ; alinha primeiro caractere
          ASR R3                ; a direita do registrador,
          ASR R3                ; porque quando se escreve
          ASR R3                ; na memoria a partir do
          ASR R3                ; endereco 65500 apenas o byte
          ASR R3                ; menos significativo e' escrito
          ASR R3                ; na posicao correspondente
          ASR R3                ; a um LED do visor
          MOV R3,(R2)           ; move para o visor
          SOB R0,__SEGUNDO      ; se ja moveu todo o texto,
          MOV (R6)+,R3          ; restaura valor original do R3 (V12 - 25/09/2014)
          RTS R7                ; retorna ao ponto de chamada
                                ; senao, vai mover o segundo
                                ; caractere da mesma palavra
__SEGUNDO:
          INC R2                ; aponta para proximo LED
          BEQ __FIM_VISOR2      ; fim do visor - volta ao LED 00
__CONTINUA2:
          MOV (R1)+,R3          ; mesmos 2 caracteres em R3 e
                                ; incrementa apontador do texto
          MOV R3,(R2)           ; desta vez, move o segundo byte
          SOB R0,__PROXIMO_LED  ; se ja moveu todo o texto,
          MOV (R6)+,R3          ; restaura valor original do R3 (V12 - 25/09/2014)
          RTS R7                ; retorna ao ponto de chamada

__PROXIMO_LED:
          INC R2                ; senao, aponta proximo LED
          BNE __VOLTA_ESCR      ; e repete o laco
                                ; fim do visor - volta ao LED 00
__FIM_VISOR1:
          MOV #65500,R2         ; aponta para primeiro LED
          BR  __VOLTA_ESCR      ; volta a escrever no visor

__FIM_VISOR2:
          MOV #65500,R2         ; aponta para primeiro LED
          BR  __CONTINUA2       ; volta a escrever no visor
;>
;>
;> Subrotina para escrever mensagem no visor otimizada (V12 - 25/09/2014):
;> 1. Nao faz deslocamentos para a direita para escrever byte mais significativo
;>    porque busca palavras comecando em "endmensagem - 1" e escreve so o lsbyte
;> 2. Escreve mensagem com tamanho variavel, encerrada com 1 byte com 0s
;> 3. Comeca a escrever mensagem no LED indicado por seu indice, de 0 a 35
;>
;> Chamada da subrotina:
;>
;> MOV #endmensagem,R0          ; endereco da mensagem a ser escrita no visor
;> MOV #indicevisor,R1          ; indice do LED onde deve iniciar a mensagem (0 a 35)
;> JSR R7,_S_ESCREVER_NO_VISOR
;>
;> Exemplo de uso:
;>	MOV #msg,R0       ; endereco da mensagem a ser escrita no visor
;>	MOV #0,R1          ; indice do LED onde deve iniciar a mensagem (0 a 35)
;>	JSR R7,_S_ESCREVER_NO_VISOR
;> :::::::::::::::::::::::::::::::::::::::::::::::::
;> msg: DAB '* BibCesar.ced V. 12 -- 25/09/2014 *',0 ;<<< NOTAR O '0' APOS O TEXTO!!!
;> 
_S_ESCREVER_NO_VISOR:
          ADD #65500,R1         ; transforma indice do LED em endereco de E/S no visor
          MOV R3,-(R6)          ; salva R3 para usar na subrotina (V12 - 25/09/2014)
__VOLTA_A_ESCREVER:
          MOV -1(R0),R3         ; coloca 2 caracteres em R3, comecando em "endmensagem-1"
          AND #255,R3           ; zera byte mais significativo da palavra lida
          CMP R3,#0             ; testa se terminou mensagem (achou 1 byte com 0s bin?rios)
          BNE __ESCREVE_NO_LED  ; se nao terminou, vai exibir caractere lido
          MOV (R6)+,R3          ; restaura valor original do R3
          RTS R7                ; retorna ao ponto de chamada

__ESCREVE_NO_LED:
          MOV R3,(R1)           ; move para o visor
          INC R0                ; aponta R0 para o proximo byte da mensagem
          INC R1                ; aponta R1 para o proximo LED no visor
          BEQ __FIM_VISOR       ; fim do visor - volta ao LED 00
          BR __VOLTA_A_ESCREVER ; volta a escrever no visor
__FIM_VISOR:
          MOV #65500,R1         ; aponta para primeiro LED
          BR __VOLTA_A_ESCREVER ; volta a escrever no visor
;>
;>
;> Subrotina para multiplicar 2 inteiros positivos de 16 bits
;>
;> Chamada da subrotina:
;>
;> MOV #multiplicando,R0        ; multiplicando no R0
;> MOV #multiplicador,R1        ; multiplicador no R1
;> JSR R7,_S_MULTIPLICAR
;>
;> No retorno da subrotina:
;> - R0 cont?m os 16 msbits do produto
;> - R1 cont?m os 16 lsbits do produto
;> - C?digo de condi??o V:
;>   V = 0 indica que a parte mais significativa do produto (R0) ? zero
;>   V = 1 indica que n?o ? zero, ou seja: se for desprezada ocorre estouro
;>
_S_MULTIPLICAR:
          MOV R0,-(R6)          ; salva R0 na pilha
          MOV R1,-(R6)          ; salva R1 na pilha
          MOV R2,-(R6)          ; salva R2 na pilha
          MOV R3,-(R6)          ; salva R3 na pilha
          MOV #16,R2            ; inicializa contador
          CLR R3                ; limpa R3
__INICIO_LACO: 
          ROR R1                ; lsb do multiplicad. em C
          BCC __NAO_SOMAR       ; se era zero, nao soma
          ADD R0,R3             ; acumula multiplicando
                                ; no produto parcial
__NAO_SOMAR:
          ROR R3                ; lsb de R3 vai para C
          BCC __FIM_LACO        ; se era zero, sai do laco
          ADD #32768,R1         ; soma 1 ao bit 15 de R1
__FIM_LACO:
          SOB R2,__INICIO_LACO  ; decrementa contador e
                                ; repete se <> 0
          MOV R3,R0             ; resultado de R3 para R0
          MOV (R6)+,R3          ; restaura R3
          MOV (R6)+,R2          ; restaura R2
          TST R0                ; se R0 <> 0
          BNE __ALERTA_ESTOURO  ; vai indicar estouro
          CCC V                 ; senao, desliga V
          RTS R7                ; retorna ao progr. princ.
__ALERTA_ESTOURO:
          SCC V                 ; liga indicador: estouro
          RTS R7                ; retorna ao ponto de chamada
;>
;>
;> Dividir int. positivo de 32 bits por um de 16 bits
;>
;> Chamada da subrotina:
;>
;> MOV #msbitsdividendo,R0      ; 16 bits mais significativos do dividendo
;> MOV #lsbitsdividendo,R1      ; 16 bits menos significativos do dividendo
;> MOV #divisor,R2              ; divisor (16 bits)
;> JSR R7,_S_DIVIDIR
;>
;> No retorno da subrotina:
;> - R0 cont?m o quociente (16 bits)
;> - R1 cont?m o resto (16 bits)
;> - R2 ainda cont?m o divisor, inalterado (16 bits)
;> - C?digos de condi??o:
;>   V = 1 indica que ocorreu estouro na divis?o (quociente n?o cabe em 16 bits)
;>   Z = 1 indica que ocorreu uma tentativa de divis?o por zero
;>   Nestes dois casos, R0, R1 e R2 n?o s?o alterados pela subrotina
;>

_S_DIVIDIR:
          TST R2                ; testa divisor
          BNE __NAO_ZERO        ; se <> zero, continua
          CCC V                 ; indica divisao por zero
          RTS R7                ; retorna ao ponto de chamada

__NAO_ZERO:
          CMP R0,R2             ; testa se dividendo(msb)
                                ; e' >= que o divisor
          BCC __INDICA_ESTOURO  ; se for, indicar estouro
                                ; note: BCC equivale a um
                                ; BGE para int. positivos
;>
          MOV R3,-(R6)          ; salva R3 na pilha
          MOV R4,-(R6)          ; salva R4 na pilha
          MOV R5,-(R6)          ; salva R5 na pilha
          MOV R0,R3             ; copia dividendo para
          MOV R1,R4             ; R3 e R4 (=q no final)
          MOV #16,R5            ; inicializa contador
          ASL R4                ; desloca dividendo p/a
          ROL R3                ; esquerda e abre espaco
          BCS __SUBTRAI_DIVISOR ; p/um bit do quociente
          CMP R3,R2             ; se n+1 msbits do divid.
          BCS __BIT_ZERO        ; maiores que divisor (= BLT p/inteiros positivos)
__SUBTRAI_DIVISOR:
          SUB R2,R3             ; subtrai divisor e
          INC R4                ; ajusta bit do quociente
__BIT_ZERO:
          SOB R5,16             ; decr. R5; se <>0, repete
          MOV R3,R1             ; copia resto para R1
          MOV R4,R0             ; copia quociente p/R0
          MOV (R6)+,R5          ; restaura
          MOV (R6)+,R4          ; registradores
          MOV (R6)+,R3          ; de trabalho
          CCC V Z               ; limpa cod. de condicao
          RTS R7                ; retorna ao ponto de chamada
;>
__INDICA_ESTOURO:
          SCC V                 ; indica overflow e nao
          CCC Z                 ; divisao por zero
          RTS R7                ; retorna ao ponto de chamada

;> Subrotina para encerrar a execu??o do programa (adicionada na V11 - 09/09/2014)
;>
;> Chamada da subrotina:
;>
;> JSR R7,_S_ENCERRAR
;>

_S_ENCERRAR:
	MOV #36,R0                ; tamanho da mensagem (em caracteres)
	MOV #__msgfim,R1          ; endereco da mensagem a ser escrita no visor
	MOV #65500,R2             ; endereco do LED onde deve iniciar a mensagem
	JSR R7,_S_ESCREVER_NO_VISOR_V0
	HLT
__msgfim: dab '** Execucao do programa encerrada **',0

;>
;> Identificacao da versao da biblioteca - e' exibida no visor
;>
          ORG 65500             ; ajusta endereco de inicio (LED 00 do visor)
          DAB '* BibCesar.ced V. 13 -- 29/09/2014 *'
;>
;> A versao 9 incorporou um subrotina para preencher o visor
;> com um mesmo caractere, cujo codigo ASCII e' passado no R2.
;> A vers?o 10 incorporou a subrotina "ultra rapida" para limpar o visor.
;> A vers?o 11 incorporou a subrotina para encerramento do programa, que
;> tem por objetivo simular uma devolu??o do controle ao sistema operacional.
;> A vers?o 12 incorporou o salvamento/restaura??o do o R3 usado na sub-rotina
;> _S_ESCREVER_NO_VISOR_V0 e adicionou uma versao otimizada desta (_S_ESCREVER_NO_VISOR).
;> A vers?o 13 corrige um erro na sub-rotina para encerrar a execu??o do programa.